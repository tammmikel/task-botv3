import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot
from database.connection import db_connection
from database.models import get_current_time
from config import BOT_TOKEN, TIMEZONE_OFFSET
from typing import List, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/scheduler.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class TaskScheduler:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        self.check_interval = 30 * 60  # 30 –º–∏–Ω—É—Ç
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not await db_connection.connect():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            try:
                await self.check_deadlines()
                await self.check_overdue_tasks()
                await asyncio.sleep(self.check_interval)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                await asyncio.sleep(60)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
    
    async def check_deadlines(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –¥–µ–¥–ª–∞–π–Ω–æ–≤ (–∑–∞ 2 —á–∞—Å–∞)"""
        try:
            now = get_current_time()
            deadline_threshold = now + timedelta(hours=2)
            
            query = """
            SELECT t.task_id, t.title, t.deadline, t.assignee_id, c.name as company_name,
                   u.telegram_id, u.first_name, u.last_name
            FROM tasks t
            JOIN companies c ON t.company_id = c.company_id
            JOIN users u ON t.assignee_id = u.user_id
            WHERE t.status IN ('new', 'in_progress')
            AND t.deadline <= $1
            AND t.deadline > $2
            """
            
            tasks = await db_connection.execute_query(
                query, deadline_threshold, now
            )
            
            for task in tasks:
                await self.send_deadline_notification(task)
                
            if tasks:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(tasks)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –¥–µ–¥–ª–∞–π–Ω–∞—Ö")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤: {e}")
    
    async def check_overdue_tasks(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        try:
            now = get_current_time()
            
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã –Ω–æ –µ—â–µ –Ω–µ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
            query = """
            UPDATE tasks 
            SET status = 'overdue', updated_at = NOW()
            WHERE deadline < $1 
            AND status IN ('new', 'in_progress')
            RETURNING task_id, title, assignee_id
            """
            
            overdue_tasks = await db_connection.execute_query(query, now)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
            for task in overdue_tasks:
                await self.send_overdue_notification(task)
            
            if overdue_tasks:
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(overdue_tasks)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
    
    async def send_deadline_notification(self, task: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è –¥–µ–¥–ª–∞–π–Ω–µ"""
        try:
            telegram_id = task['telegram_id']
            name = f"{task['first_name'] or ''} {task['last_name'] or ''}".strip()
            if not name:
                name = "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
            
            deadline_str = task['deadline'].strftime('%d.%m.%Y %H:%M')
            
            message = (
                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ!\n\n"
                f"üìã –ó–∞–¥–∞—á–∞: {task['title']}\n"
                f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {task['company_name']}\n"
                f"üìÖ –î–µ–¥–ª–∞–π–Ω: {deadline_str}\n\n"
                f"–î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 2 —á–∞—Å–æ–≤!"
            )
            
            await self.bot.send_message(telegram_id, message)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–µ: {e}")
    
    async def send_overdue_notification(self, task: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            query = "SELECT telegram_id, first_name, last_name FROM users WHERE user_id = $1"
            user = await db_connection.execute_one(query, task['assignee_id'])
            
            if user:
                telegram_id = user['telegram_id']
                name = f"{user['first_name'] or ''} {user['last_name'] or ''}".strip()
                if not name:
                    name = "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
                
                message = (
                    f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞!\n\n"
                    f"üìã –ó–∞–¥–∞—á–∞: {task['title']}\n"
                    f"‚ùó –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞'\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–¥–∞—á—É –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ."
                )
                
                await self.bot.send_message(telegram_id, message)
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ: {e}")
    
    async def send_status_change_notification(self, task_id: str, new_status: str, 
                                            changed_by_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
            query = """
            SELECT t.title, t.assignee_id, t.created_by, c.name as company_name,
                   assignee.telegram_id as assignee_telegram,
                   creator.telegram_id as creator_telegram
            FROM tasks t
            JOIN companies c ON t.company_id = c.company_id
            JOIN users assignee ON t.assignee_id = assignee.user_id
            JOIN users creator ON t.created_by = creator.user_id
            WHERE t.task_id = $1
            """
            
            task = await db_connection.execute_one(query, task_id)
            if not task:
                return
            
            status_names = {
                'new': '–ù–æ–≤–∞—è',
                'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
                'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
                'overdue': '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞',
                'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞'
            }
            
            status_text = status_names.get(new_status, new_status)
            
            message = (
                f"üìã –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏\n\n"
                f"–ó–∞–¥–∞—á–∞: {task['title']}\n"
                f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {task['company_name']}\n"
                f"üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status_text}"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫—Ä–æ–º–µ —Ç–æ–≥–æ –∫—Ç–æ –∏–∑–º–µ–Ω–∏–ª
            recipients = set()
            recipients.add(task['assignee_telegram'])
            recipients.add(task['creator_telegram'])
            
            # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–≥–æ –∫—Ç–æ –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å
            changer_query = "SELECT telegram_id FROM users WHERE user_id = $1"
            changer = await db_connection.execute_one(changer_query, changed_by_id)
            if changer:
                recipients.discard(changer['telegram_id'])
            
            for telegram_id in recipients:
                try:
                    await self.bot.send_message(telegram_id, message)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ({len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        await self.bot.session.close()
        await db_connection.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    scheduler = TaskScheduler()
    
    try:
        await scheduler.start()
    except KeyboardInterrupt:
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    finally:
        await scheduler.stop()

if __name__ == "__main__":
    asyncio.run(main())