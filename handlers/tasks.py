from aiogram import Dispatcher
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import F
from aiogram.fsm.context import FSMContext
from database.models import UserManager, CompanyManager, TaskManager
from utils.keyboards import get_main_keyboard, get_back_keyboard, get_task_urgent_keyboard, get_task_deadline_keyboard
from utils.states import TaskStates
from utils.file_storage import file_storage
from datetime import datetime, timedelta
import calendar
import logging
from utils.decorators import smart_clear_chat

logger = logging.getLogger(__name__)

@smart_clear_chat
async def create_task_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É'"""
    try:
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        telegram_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await UserManager.get_user_by_telegram_id(telegram_id)
        if not user or user['role'] not in ['director', 'manager']:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á.",
                reply_markup=get_main_keyboard(user['role'] if user else 'admin')
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(created_by=user['user_id'])
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        await state.set_state(TaskStates.waiting_for_title)
        
        await message.answer(
            "üìã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏\n\n"
            "**–®–∞–≥ 1/7:** –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
            reply_markup=get_back_keyboard(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_task_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@smart_clear_chat
async def process_task_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
        task_title = message.text.strip()
        if len(task_title) < 3:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞):",
                reply_markup=get_back_keyboard()
            )
            return
        
        if len(task_title) > 500:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        await state.update_data(task_title=task_title)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
        await state.set_state(TaskStates.waiting_for_description)
        
        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {task_title}\n\n"
            f"–®–∞–≥ 2/7: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n"
            f"üí° –ú–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã –∏–ª–∏ —Ñ–æ—Ç–æ –∫ –æ–ø–∏—Å–∞–Ω–∏—é.",
            reply_markup=get_back_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_task_title: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@smart_clear_chat
async def process_task_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª—ã)"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        task_description = ""
        task_files = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        if message.text:
            task_description = message.text.strip()
            if len(task_description) > 2000:
                await message.answer(
                    "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤):",
                    reply_markup=get_back_keyboard()
                )
                return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ/—Ñ–∞–π–ª—É
        elif message.caption:
            task_description = message.caption.strip()
            if len(task_description) > 2000:
                await message.answer(
                    "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤):",
                    reply_markup=get_back_keyboard()
                )
                return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
        if message.photo:
            # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            photo = message.photo[-1]
            await message.answer("üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            from main import bot
            file_obj = await bot.get_file(photo.file_id)
            file_data = await bot.download_file(file_obj.file_path)
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            file_content = file_data.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            if not file_storage.validate_file_size(len(file_content)):
                await message.answer(
                    "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 100 –ú–ë",
                    reply_markup=get_back_keyboard()
                )
                return
            
            task_files.append({
                'type': 'photo',
                'file_id': photo.file_id,
                'file_size': len(file_content),
                'file_name': f"photo_{photo.file_id}.jpg",
                'content_type': 'image/jpeg',
                'file_data': file_content
            })
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        elif message.document:
            document = message.document
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if not file_storage.validate_file_size(document.file_size):
                await message.answer(
                    "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 100 –ú–ë",
                    reply_markup=get_back_keyboard()
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not file_storage.validate_file_extension(document.file_name):
                await message.answer(
                    "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞!\n\n"
                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥–æ–∫—É–º–µ–Ω—Ç—ã PDF/DOC/XLS, –∞—Ä—Ö–∏–≤—ã ZIP/RAR",
                    reply_markup=get_back_keyboard()
                )
                return
            
            await message.answer("üìé –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            from main import bot
            file_obj = await bot.get_file(document.file_id)
            file_data = await bot.download_file(file_obj.file_path)
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            file_content = file_data.read()
            
            task_files.append({
                'type': 'document',
                'file_id': document.file_id,
                'file_name': document.file_name,
                'file_size': len(file_content),
                'content_type': file_storage.get_content_type_by_extension(document.file_name),
                'file_data': file_content
            })
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ –ø–æ–¥–ø–∏—Å–∏, –Ω–∏ —Ñ–∞–π–ª–æ–≤
        if not task_description and not task_files:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é:",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        if not task_description:
            task_description = "–§–∞–π–ª –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ–∞–π–ª—ã
        await state.update_data(
            task_description=task_description,
            task_files=task_files
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        companies = await CompanyManager.get_all_companies()
        
        if not companies:
            await message.answer(
                "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏!\n\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏—è–º–∏'.",
                reply_markup=get_back_keyboard()
            )
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏
        company_keyboard = create_company_keyboard(companies)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏
        await state.set_state(TaskStates.waiting_for_company)
        
        success_text = "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ"
        if task_files:
            success_text += f" (+ {len(task_files)} —Ñ–∞–π–ª(–æ–≤))"
        
        await message.answer(
            f"{success_text}\n\n"
            f"–®–∞–≥ 3/7: –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –∑–∞–¥–∞—á–∏:",
            reply_markup=company_keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_task_description: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@smart_clear_chat
async def process_company_selection(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
    try:
        logger.info(f"–í—ã–±–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
        companies = await CompanyManager.get_all_companies()
        selected_company = None
        
        # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é
        for company in companies:
            if company['name'] == message.text:
                selected_company = company
                break
        
        if not selected_company:
            await message.answer(
                "‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:",
                reply_markup=create_company_keyboard(companies)
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é
        await state.update_data(
            company_id=selected_company['company_id'],
            company_name=selected_company['name']
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
        await state.set_state(TaskStates.waiting_for_initiator_name)
        
        await message.answer(
            f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è: **{selected_company['name']}**\n\n"
            f"**–®–∞–≥ 4/7:** –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –∑–∞–¥–∞—á–∏:",
            reply_markup=get_back_keyboard(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_company_selection: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@smart_clear_chat
async def process_initiator_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞"""
    try:
        logger.info(f"–í–≤–æ–¥ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        initiator_name = message.text.strip()
        if len(initiator_name) < 2:
            await message.answer(
                "‚ùå –ò–º—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):",
                reply_markup=get_back_keyboard()
            )
            return
        
        if len(initiator_name) > 255:
            await message.answer(
                "‚ùå –ò–º—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤):",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
        await state.update_data(initiator_name=initiator_name)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await state.set_state(TaskStates.waiting_for_initiator_phone)
        
        await message.answer(
            f"‚úÖ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: **{initiator_name}**\n\n"
            f"**–®–∞–≥ 5/7:** –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞:",
            reply_markup=get_back_keyboard(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_initiator_name: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@smart_clear_chat
async def process_initiator_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞"""
    try:
        logger.info(f"–í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        phone = message.text.strip()
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if len(phone) < 10:
            await message.answer(
                "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                reply_markup=get_back_keyboard()
            )
            return
        
        if len(phone) > 20:
            await message.answer(
                "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        await state.update_data(initiator_phone=phone)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        assignees = await UserManager.get_assignees()
        
        if not assignees:
            await message.answer(
                "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π!\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_back_keyboard()
            )
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
        assignee_keyboard = create_assignee_keyboard(assignees)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        await state.set_state(TaskStates.waiting_for_assignee)
        
        await message.answer(
            f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω: **{phone}**\n\n"
            f"**–®–∞–≥ 6/7:** –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–¥–∞—á–∏:",
            reply_markup=assignee_keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_initiator_phone: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def create_company_keyboard(companies):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏"""
    buttons = []
    for company in companies:
        buttons.append([KeyboardButton(text=company['name'])])
    buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    
    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=False
    )

def create_assignee_keyboard(assignees):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏"""
    buttons = []
    for assignee in assignees:
        name = f"{assignee['first_name'] or ''} {assignee['last_name'] or ''}".strip()
        if not name:
            name = assignee['username'] or f"ID: {assignee['telegram_id']}"
        buttons.append([KeyboardButton(text=name)])
    buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    
    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=False
    )

def register_task_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.message.register(create_task_handler, F.text == "üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
    dp.message.register(process_task_title, TaskStates.waiting_for_title)
    dp.message.register(process_task_description, TaskStates.waiting_for_description)
    dp.message.register(process_company_selection, TaskStates.waiting_for_company)
    dp.message.register(process_initiator_name, TaskStates.waiting_for_initiator_name)
    dp.message.register(process_initiator_phone, TaskStates.waiting_for_initiator_phone)
    dp.message.register(process_assignee_selection, TaskStates.waiting_for_assignee)
    dp.message.register(process_priority_selection, TaskStates.waiting_for_priority)
    dp.message.register(process_deadline_selection, TaskStates.waiting_for_deadline)
    dp.message.register(process_custom_date, TaskStates.waiting_for_custom_date)
    dp.callback_query.register(process_calendar_callback, F.data.startswith("cal_"))

@smart_clear_chat
async def process_assignee_selection(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    try:
        logger.info(f"–í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        assignees = await UserManager.get_assignees()
        selected_assignee = None
        
        # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
        for assignee in assignees:
            name = f"{assignee['first_name'] or ''} {assignee['last_name'] or ''}".strip()
            if not name:
                name = assignee['username'] or f"ID: {assignee['telegram_id']}"
            
            if name == message.text:
                selected_assignee = assignee
                break
        
        if not selected_assignee:
            await message.answer(
                "‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞:",
                reply_markup=create_assignee_keyboard(assignees)
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        await state.update_data(
            assignee_id=selected_assignee['user_id'],
            assignee_name=f"{selected_assignee['first_name'] or ''} {selected_assignee['last_name'] or ''}".strip() or selected_assignee['username']
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        await state.set_state(TaskStates.waiting_for_priority)
        
        await message.answer(
            f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: **{message.text}**\n\n"
            f"**–®–∞–≥ 7/8:** –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:",
            reply_markup=get_task_urgent_keyboard(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_assignee_selection: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@smart_clear_chat
async def process_priority_selection(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    try:
        logger.info(f"–í—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        if message.text == "üî• –°—Ä–æ—á–Ω–∞—è":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–æ—á–Ω—É—é –∑–∞–¥–∞—á—É
            await state.update_data(is_urgent=True)
            priority_text = "üî• –°—Ä–æ—á–Ω–∞—è"
            
        elif message.text == "üìù –û–±—ã—á–Ω–∞—è":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ã—á–Ω—É—é –∑–∞–¥–∞—á—É
            await state.update_data(is_urgent=False)
            priority_text = "üìù –û–±—ã—á–Ω–∞—è"
            
        else:
            await message.answer(
                "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
                reply_markup=get_task_urgent_keyboard()
            )
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–µ–¥–ª–∞–π–Ω–∞
        await state.set_state(TaskStates.waiting_for_deadline)
        
        await message.answer(
            f"‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: **{priority_text}**\n\n"
            f"**–®–∞–≥ 8/8:** –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏:",
            reply_markup=get_task_deadline_keyboard(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_priority_selection: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@smart_clear_chat
async def process_deadline_selection(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–∞"""
    try:
        logger.info(f"–í—ã–±–æ—Ä –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–¥–ª–∞–π–Ω
        from datetime import datetime, timedelta
        from config import TIMEZONE_OFFSET
        from datetime import timezone
        
        tz = timezone(timedelta(hours=TIMEZONE_OFFSET))
        now = datetime.now(tz)
        deadline = None
        
        if message.text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
            deadline = now.replace(hour=23, minute=59, second=59)
        elif message.text == "üìÖ –ó–∞–≤—Ç—Ä–∞":
            deadline = (now + timedelta(days=1)).replace(hour=23, minute=59, second=59)
        elif message.text == "üìÖ –ß–µ—Ä–µ–∑ 3 –¥–Ω—è":
            deadline = (now + timedelta(days=3)).replace(hour=23, minute=59, second=59)
        elif message.text == "üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            await message.answer(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞:",
                reply_markup=create_calendar_keyboard(now.year, now.month)
            )
            return
        else:
            await message.answer(
                "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
                reply_markup=get_task_deadline_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
        await create_final_task(message, state, deadline)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_deadline_selection: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@smart_clear_chat
async def process_custom_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∞—Ç—ã"""
    try:
        logger.info(f"–í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        from datetime import datetime, timedelta
        from config import TIMEZONE_OFFSET
        from datetime import timezone
        import re
        
        tz = timezone(timedelta(hours=TIMEZONE_OFFSET))
        user_input = message.text.strip()
        deadline = None
        
        # –ü–∞—Ä—Å–∏–º "—á–µ—Ä–µ–∑ N –¥–Ω–µ–π"
        days_match = re.match(r'—á–µ—Ä–µ–∑\s+(\d+)\s+–¥(?:–Ω–µ–π|–Ω—è|–µ–Ω—å)', user_input.lower())
        if days_match:
            days = int(days_match.group(1))
            deadline = (datetime.now(tz) + timedelta(days=days)).replace(hour=23, minute=59, second=59)
        
        # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì
        elif re.match(r'\d{2}\.\d{2}\.\d{4}', user_input):
            try:
                deadline = datetime.strptime(user_input + " 23:59:59", "%d.%m.%Y %H:%M:%S")
                deadline = deadline.replace(tzinfo=tz)
            except ValueError:
                pass
        
        # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)
        elif re.match(r'\d{2}\.\d{2}', user_input):
            try:
                current_year = datetime.now().year
                deadline = datetime.strptime(f"{user_input}.{current_year} 23:59:59", "%d.%m.%Y %H:%M:%S")
                deadline = deadline.replace(tzinfo=tz)
            except ValueError:
                pass
        
        if not deadline:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                "‚Ä¢ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20.07.2025)\n"
                "‚Ä¢ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20.07) - —Ç–µ–∫—É—â–∏–π –≥–æ–¥\n"
                "‚Ä¢ —á–µ—Ä–µ–∑ N –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π)",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if deadline < datetime.now(tz):
            await message.answer(
                "‚ùå –î–µ–¥–ª–∞–π–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
        await create_final_task(message, state, deadline)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_custom_date: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@smart_clear_chat
async def create_final_task(message: Message, state: FSMContext, deadline: datetime):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ë–î"""
    try:
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –°–†–ê–ó–£
        telegram_id = message.from_user.id
        user = await UserManager.get_user_by_telegram_id(telegram_id)
        role = user['role'] if user else 'admin'
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        task_id = await TaskManager.create_task(
            title=data['task_title'],
            description=data['task_description'],
            company_id=data['company_id'],
            initiator_name=data['initiator_name'],
            initiator_phone=data['initiator_phone'],
            assignee_id=data['assignee_id'],
            created_by=data['created_by'],
            is_urgent=data.get('is_urgent', False),
            deadline=deadline
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        if task_id:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            uploaded_files = []
            task_files = data.get('task_files', [])
            
            if task_files:
                for file_info in task_files:
                    try:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                        save_result = await file_storage.save_file(
                            file_data=file_info['file_data'],
                            file_name=file_info['file_name'],
                            content_type=file_info['content_type'],
                            task_id=task_id
                        )
                        
                        if save_result:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –ë–î
                            from database.models import FileManager
                            if await FileManager.save_file_info(
                                task_id=task_id,
                                user_id=data['created_by'],
                                file_name=save_result['original_name'],
                                file_path=save_result['file_path'],
                                file_size=save_result['size'],
                                content_type=save_result['content_type'],
                                thumbnail_path=save_result['thumbnail_path']
                            ):
                                uploaded_files.append(save_result['original_name'])
                                logger.info(f"–§–∞–π–ª {file_info['file_name']} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                            else:
                                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_info['file_name']} –≤ –ë–î")
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_info['file_name']}")
                            
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ (—É–±–∏—Ä–∞–µ–º Markdown —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞)
            success_text = "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            success_text += f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {data['task_title']}\n"
            success_text += f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {data['company_name']}\n"
            success_text += f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {data['assignee_name']}\n"
            
            is_urgent = data.get('is_urgent', False)
            if is_urgent:
                success_text += f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: üî• –°—Ä–æ—á–Ω–∞—è\n"
            else:
                success_text += f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: üìù –û–±—ã—á–Ω–∞—è\n"
            
            success_text += f"üìÖ –î–µ–¥–ª–∞–π–Ω: {deadline.strftime('%d.%m.%Y %H:%M')}\n"
            success_text += f"üìû –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {data['initiator_name']} ({data['initiator_phone']})\n"
            success_text += f"üÜî ID –∑–∞–¥–∞—á–∏: {task_id}"

            if uploaded_files:
                success_text += f"\nüìé –§–∞–π–ª—ã: {', '.join(uploaded_files)}"
            
            await message.answer(
                success_text,
                reply_markup=get_main_keyboard(role)
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
            try:
                assignee_telegram_id = None
                assignees = await UserManager.get_assignees()
                for assignee in assignees:
                    if assignee['user_id'] == data['assignee_id']:
                        assignee_telegram_id = assignee['telegram_id']
                        break
                
                if assignee_telegram_id and assignee_telegram_id != telegram_id:
                    from main import bot
                    priority_text = "üî• –°—Ä–æ—á–Ω–∞—è" if is_urgent else "üìù –û–±—ã—á–Ω–∞—è"
                    notification_text = f"üìã –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞!\n\n"
                    notification_text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['task_title']}\n"
                    notification_text += f"–ö–æ–º–ø–∞–Ω–∏—è: {data['company_name']}\n"
                    notification_text += f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_text}\n"
                    notification_text += f"–î–µ–¥–ª–∞–π–Ω: {deadline.strftime('%d.%m.%Y %H:%M')}\n"
                    notification_text += f"–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {data['initiator_name']}"
                    
                    await bot.send_message(assignee_telegram_id, notification_text)
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {assignee_telegram_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard(role)
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_final_task: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def create_calendar_keyboard(year: int, month: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    keyboard = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞
    month_names = [
        "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
    ]
    header = f"{month_names[month-1]} {year}"
    keyboard.append([InlineKeyboardButton(text=header, callback_data="ignore")])
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append([InlineKeyboardButton(text=day, callback_data="ignore") for day in week_days])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Å—è—Ü–∞
    cal = calendar.monthcalendar(year, month)
    
    for week in cal:
        week_buttons = []
        for day in week:
            if day == 0:
                week_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º –ª–∏ –¥–∞—Ç–∞
                from datetime import datetime
                date_obj = datetime(year, month, day)
                if date_obj.date() < datetime.now().date():
                    week_buttons.append(InlineKeyboardButton(text=str(day), callback_data="ignore"))
                else:
                    callback_data = f"cal_{year}_{month}_{day}"
                    week_buttons.append(InlineKeyboardButton(text=str(day), callback_data=callback_data))
        keyboard.append(week_buttons)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1
    
    navigation = []
    navigation.append(InlineKeyboardButton(text="‚óÄ –ü—Ä–µ–¥", callback_data=f"cal_nav_{prev_year}_{prev_month}"))
    navigation.append(InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="cal_today"))
    navigation.append(InlineKeyboardButton(text="–°–ª–µ–¥ ‚ñ∂", callback_data=f"cal_nav_{next_year}_{next_month}"))
    keyboard.append(navigation)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cal_back")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@smart_clear_chat
async def process_calendar_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
    try:
        data = callback.data
        
        if data == "ignore":
            await callback.answer()
            return
        
        elif data == "cal_back":
            await callback.message.edit_text(
                "‚ùå –í—ã–±–æ—Ä –¥–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏:"
            )
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏:",
                reply_markup=get_task_deadline_keyboard()
            )
            await callback.answer()
            return
        
        elif data == "cal_today":
            from datetime import datetime, timedelta
            from config import TIMEZONE_OFFSET
            from datetime import timezone
            
            tz = timezone(timedelta(hours=TIMEZONE_OFFSET))
            deadline = datetime.now(tz).replace(hour=23, minute=59, second=59)
            
            await callback.message.edit_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {deadline.strftime('%d.%m.%Y')}"
            )
            await create_final_task_from_callback(callback, state, deadline)
            return
        
        elif data.startswith("cal_nav_"):
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
            _, _, year, month = data.split("_")
            year, month = int(year), int(month)
            
            await callback.message.edit_text(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞:",
                reply_markup=create_calendar_keyboard(year, month)
            )
            await callback.answer()
            return
        
        elif data.startswith("cal_"):
            # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
            _, year, month, day = data.split("_")
            year, month, day = int(year), int(month), int(day)
            
            from datetime import datetime, timedelta
            from config import TIMEZONE_OFFSET
            from datetime import timezone
            
            tz = timezone(timedelta(hours=TIMEZONE_OFFSET))
            deadline = datetime(year, month, day, 23, 59, 59, tzinfo=tz)
            
            await callback.message.edit_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {deadline.strftime('%d.%m.%Y')}"
            )
            await create_final_task_from_callback(callback, state, deadline)
            return
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_calendar_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def create_final_task_from_callback(callback: CallbackQuery, state: FSMContext, deadline: datetime):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ callback –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–æ–¥ —á—Ç–æ –∏ –≤ create_final_task, –Ω–æ —Å callback
        message = callback.message
        await create_final_task(message, state, deadline)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_final_task_from_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")