from aiogram import Dispatcher
from aiogram.types import Message
from aiogram import F
from aiogram.fsm.context import FSMContext
from database.models import UserManager, CompanyManager
from utils.keyboards import get_main_keyboard, get_company_management_keyboard, get_back_keyboard, get_skip_keyboard
from utils.states import CompanyStates
import logging
from utils.decorators import smart_clear_chat

logger = logging.getLogger(__name__)

@smart_clear_chat
async def company_management_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏—è–º–∏'"""
    try:
        logger.info(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏—è–º–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        telegram_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await UserManager.get_user_by_telegram_id(telegram_id)
        if not user or user['role'] not in ['director', 'manager']:
            await message.answer(
                message,
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏—è–º–∏.",
                reply_markup=get_main_keyboard(user['role'] if user else 'admin')
            )
            return
        
        await message.answer(
            message,
            "üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏—è–º–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_company_management_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ company_management_handler: {e}")
        await chat_cleaner.clear_and_send(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@smart_clear_chat
async def add_company_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é'"""
    try:
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        telegram_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await UserManager.get_user_by_telegram_id(telegram_id)
        if not user or user['role'] not in ['director', 'manager']:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(created_by=user['user_id'])
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        await state.set_state(CompanyStates.waiting_for_name)
        
        await message.answer(
            "üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:",
            reply_markup=get_back_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_company_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@smart_clear_chat
async def list_companies_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π'"""
    try:
        logger.info(f"–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        telegram_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await UserManager.get_user_by_telegram_id(telegram_id)
        if not user or user['role'] not in ['director', 'manager']:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–π.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
        companies = await CompanyManager.get_all_companies()
        
        if not companies:
            await message.answer(
                "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –ø—É—Å—Ç\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é'.",
                reply_markup=get_company_management_keyboard()
            )
        else:
            company_list = "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π:\n\n"
            for i, company in enumerate(companies, 1):
                company_list += f"{i}. **{company['name']}**\n"
                if company['description']:
                    company_list += f"   üìù {company['description']}\n"
                company_list += f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {company['created_at'].strftime('%d.%m.%Y')}\n\n"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(company_list) > 4000:
                parts = []
                current_part = "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π:\n\n"
                
                for i, company in enumerate(companies, 1):
                    company_text = f"{i}. **{company['name']}**\n"
                    if company['description']:
                        company_text += f"   üìù {company['description']}\n"
                    company_text += f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {company['created_at'].strftime('%d.%m.%Y')}\n\n"
                    
                    if len(current_part + company_text) > 4000:
                        parts.append(current_part)
                        current_part = company_text
                    else:
                        current_part += company_text
                
                if current_part:
                    parts.append(current_part)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
                for part in parts:
                    await message.answer(part, parse_mode="Markdown")
                
                await message.answer(
                    "üìã –≠—Ç–æ –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏.",
                    reply_markup=get_company_management_keyboard()
                )
            else:
                await message.answer(
                    company_list,
                    reply_markup=get_company_management_keyboard(),
                    parse_mode="Markdown"
                )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_companies_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@smart_clear_chat
async def back_to_main_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        telegram_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏
        user = await UserManager.get_user_by_telegram_id(telegram_id)
        role = user['role'] if user else 'admin'
        
        role_names = {
            'director': "–î–∏—Ä–µ–∫—Ç–æ—Ä",
            'manager': "–ú–µ–Ω–µ–¥–∂–µ—Ä",
            'main_admin': "–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 
            'admin': "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        }
        
        role_text = role_names.get(role, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")
        
        await message.answer(
            f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            f"–í–∞—à–∞ —Ä–æ–ª—å: {role_text}",
            reply_markup=get_main_keyboard(role)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_main_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@smart_clear_chat
async def process_company_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
        company_name = message.text.strip()
        if len(company_name) < 2:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):",
                reply_markup=get_back_keyboard()
            )
            return
        
        if len(company_name) > 255:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤):",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        await state.update_data(company_name=company_name)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
        await state.set_state(CompanyStates.waiting_for_description)
        
        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: **{company_name}**\n\n"
            f"üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n\n"
            f"–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è.",
            reply_markup=get_skip_keyboard(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_company_name: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@smart_clear_chat
async def process_company_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        company_name = data.get('company_name')
        created_by = data.get('created_by')
        
        description = None
        if message.text != "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            description = message.text.strip()
            if len(description) > 1000:
                await message.answer(
                    "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
                    reply_markup=get_skip_keyboard()
                )
                return
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é
        company_id = await CompanyManager.create_company(
            name=company_name,
            description=description,
            created_by=created_by
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        if company_id:
            result_text = f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            result_text += f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: **{company_name}**\n"
            if description:
                result_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            result_text += f"üÜî ID: `{company_id}`"
            
            await message.answer(
                result_text,
                reply_markup=get_company_management_keyboard(),
                parse_mode="Markdown"
            )
            
            logger.info(f"–ö–æ–º–ø–∞–Ω–∏—è '{company_name}' —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {company_id}")
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_company_management_keyboard()
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_company_description: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@smart_clear_chat
async def skip_description_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è"""
    await process_company_description(message, state)

def register_company_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏—è–º–∏"""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.message.register(company_management_handler, F.text == "üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏—è–º–∏")
    dp.message.register(add_company_handler, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é")
    dp.message.register(list_companies_handler, F.text == "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π")
    dp.message.register(back_to_main_handler, F.text == "üîô –ù–∞–∑–∞–¥")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
    dp.message.register(process_company_name, CompanyStates.waiting_for_name)
    dp.message.register(process_company_description, CompanyStates.waiting_for_description)
    dp.message.register(skip_description_handler, F.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")