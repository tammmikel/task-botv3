from aiogram import Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import F
from database.models import UserManager, TaskManager, FileManager
from utils.keyboards import get_main_keyboard, get_task_status_keyboard
from datetime import datetime
import logging
from utils.chat_cleaner import chat_cleaner
from utils.decorators import smart_clear_chat

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
STATUS_NAMES = {
    'new': '–ù–æ–≤–∞—è',
    'in_progress': '–í —Ä–∞–±–æ—Ç–µ', 
    'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
    'overdue': '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞',
    'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞'
}

@smart_clear_chat
async def my_tasks_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∑–∞–¥–∞—á–∏'"""
    try:
        logger.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await UserManager.get_user_by_telegram_id(message.from_user.id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tasks = await TaskManager.get_user_tasks(user['user_id'], user['role'])
        
        if not tasks:
            await message.answer(
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á",
                reply_markup=get_main_keyboard(user['role'])
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_buttons = [
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_tasks"),
             InlineKeyboardButton(text="üè¢ –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="filter_companies")]
        ]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∑–∞–¥–∞—á–∞–º–∏
        task_buttons = []
        for task in tasks[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 –∑–∞–¥–∞—á
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            urgent_emoji = "üî•" if task.get('is_urgent', False) else ""
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
            title_short = task['title'][:30] + "..." if len(task['title']) > 30 else task['title']
            company_short = task['company_name'][:15] + "..." if len(task['company_name']) > 15 else task['company_name']
            
            button_text = f"{task['status_emoji']}{urgent_emoji} {title_short} | {company_short} | {task.get('deadline_short', '')}"
            
            task_buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"task_{task['task_id']}"
            )])
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        keyboard = control_buttons + task_buttons
        
        tasks_text = f"üìù –í–∞—à–∏ –∑–∞–¥–∞—á–∏ ({len(tasks)}):"
        if len(tasks) > 15:
            tasks_text += f"\n\n–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 15 –∏–∑ {len(tasks)} –∑–∞–¥–∞—á"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ (–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—Å—Ç–∏—Ç —á–∞—Ç)
        await message.answer(
            tasks_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_tasks_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_task_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∑–∞–¥–∞—á–∏"""
    try:
        data = callback.data
        logger.info(f"Callback –∑–∞–¥–∞—á–∏: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        if data.startswith("task_"):
            task_id = data.replace("task_", "")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
            task = await TaskManager.get_task_by_id(task_id)
            if not task:
                await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∑–∞–¥–∞—á–∏
            files = await FileManager.get_task_files(task_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤
            user = await UserManager.get_user_by_telegram_id(callback.from_user.id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            detail_text = f"üìã {task['title']}\n\n"
            detail_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}\n"
            detail_text += f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {task['company_name']}\n"
            
            if task.get('is_urgent', False):
                detail_text += f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: üî• –°—Ä–æ—á–Ω–∞—è\n"
            else:
                detail_text += f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: üìù –û–±—ã—á–Ω–∞—è\n"
            
            status_name = STATUS_NAMES.get(task['status'], task['status'])
            detail_text += f"üìä –°—Ç–∞—Ç—É—Å: {task.get('status_emoji', '‚ùì')} {status_name}\n"
            detail_text += f"üìÖ –î–µ–¥–ª–∞–π–Ω: {task['deadline_str']}\n"
            detail_text += f"üìû –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {task['initiator_name']}\n"
            detail_text += f"‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {task['initiator_phone']}\n"
            
            if files:
                detail_text += f"\nüìé –§–∞–π–ª—ã ({len(files)}):\n"
                for file in files:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    size_mb = file['file_size'] / (1024 * 1024)
                    if size_mb < 1:
                        size_str = f"{file['file_size'] / 1024:.1f} –ö–ë"
                    else:
                        size_str = f"{size_mb:.1f} –ú–ë"
                    
                    detail_text += f"‚Ä¢ {file['file_name']} ({size_str})\n"
                    detail_text += f"  üë§ –ó–∞–≥—Ä—É–∑–∏–ª: {file['uploader_name']}\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            action_buttons = []
            
            # –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞)
            task_assignee_id = task.get('assignee_id')
            if user and (user['user_id'] == task_assignee_id or user['role'] in ['director', 'manager']):
                action_buttons.append([InlineKeyboardButton(
                    text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", 
                    callback_data=f"status_{task_id}"
                )])
            
            # –ö–Ω–æ–ø–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            action_buttons.append([InlineKeyboardButton(
                text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", 
                callback_data=f"comments_{task_id}"
            )])
            
            # –ö–Ω–æ–ø–∫–∞ —Ñ–∞–π–ª–æ–≤
            if files:
                action_buttons.append([InlineKeyboardButton(
                    text="üìé –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã", 
                    callback_data=f"files_{task_id}"
                )])
            
            action_buttons.append([InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", 
                callback_data="back_to_tasks"
            )])
            
            await callback.message.edit_text(
                detail_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=action_buttons)
            )
            
        elif data.startswith("status_"):
            task_id = data.replace("status_", "")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            task = await TaskManager.get_task_by_id(task_id)
            user = await UserManager.get_user_by_telegram_id(callback.from_user.id)
            
            if not task or not user:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
            status_buttons = []
            current_status = task['status']
            
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—Ç–æ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å
            if current_status == 'new':
                status_buttons.append([InlineKeyboardButton(text="‚è≥ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"set_status_{task_id}_in_progress")])
            elif current_status == 'in_progress':
                status_buttons.append([InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"set_status_{task_id}_completed")])
                # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ –Ω–æ–≤—ã–µ
                status_buttons.append([InlineKeyboardButton(text="üÜï –í–µ—Ä–Ω—É—Ç—å –≤ –Ω–æ–≤—ã–µ", callback_data=f"set_status_{task_id}_new")])
            elif current_status == 'overdue':
                # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞–±–æ—Ç—É
                status_buttons.append([InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"set_status_{task_id}_completed")])
                status_buttons.append([InlineKeyboardButton(text="‚è≥ –í–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"set_status_{task_id}_in_progress")])
            
            # –î–∏—Ä–µ–∫—Ç–æ—Ä –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–≥—É—Ç:
            if user['role'] in ['director', 'manager']:
                # –í–µ—Ä–Ω—É—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç—É
                if current_status == 'completed':
                    status_buttons.append([InlineKeyboardButton(text="‚è≥ –í–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"set_status_{task_id}_in_progress")])
                
                # –û—Ç–º–µ–Ω–∏—Ç—å –ª—é–±—É—é –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
                if current_status not in ['cancelled', 'completed']:
                    status_buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"set_status_{task_id}_cancelled")])
            
            status_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"task_{task_id}")])
            
            current_status_name = STATUS_NAMES.get(current_status, current_status)
            await callback.message.edit_text(
                f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏\n\n"
                f"üìã –ó–∞–¥–∞—á–∞: {task['title']}\n"
                f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status_name}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=status_buttons)
            )
            
        elif data.startswith("set_status_"):
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            parts = data.split("_", 3)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
            task_id = parts[2]
            new_status = parts[3]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await UserManager.get_user_by_telegram_id(callback.from_user.id)
            
            if not user:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if await TaskManager.update_task_status(task_id, new_status):
                status_name = STATUS_NAMES.get(new_status, new_status)
                
                await callback.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_name}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–¥–∞—á–∏
                await process_task_callback_by_id(callback, task_id)
                
                logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user['user_id']}")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
            
        elif data == "filter_companies":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
            telegram_id = callback.from_user.id
            user = await UserManager.get_user_by_telegram_id(telegram_id)
            companies = await TaskManager.get_companies_with_tasks(user['user_id'], user['role'])
            
            keyboard = []
            for company in companies:
                keyboard.append([InlineKeyboardButton(
                    text=f"{company['name']} ({company['task_count']})",
                    callback_data=f"company_{company['company_id']}"
                )])
            
            keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_tasks")])
            
            await callback.message.edit_text(
                "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            
        elif data == "back_to_tasks":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
            await show_tasks_list(callback)
            
        elif data == "refresh_tasks":
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            await show_tasks_list(callback, "‚úÖ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")

        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_task_callback: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def process_task_callback_by_id(callback: CallbackQuery, task_id: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ –ø–æ ID"""
    # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
        task = await TaskManager.get_task_by_id(task_id)
        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∑–∞–¥–∞—á–∏
        files = await FileManager.get_task_files(task_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤
        user = await UserManager.get_user_by_telegram_id(callback.from_user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        detail_text = f"üìã {task['title']}\n\n"
        detail_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}\n"
        detail_text += f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {task['company_name']}\n"
        
        if task.get('is_urgent', False):
            detail_text += f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: üî• –°—Ä–æ—á–Ω–∞—è\n"
        else:
            detail_text += f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: üìù –û–±—ã—á–Ω–∞—è\n"
        
        status_name = STATUS_NAMES.get(task['status'], task['status'])
        detail_text += f"üìä –°—Ç–∞—Ç—É—Å: {task.get('status_emoji', '‚ùì')} {status_name}\n"
        detail_text += f"üìÖ –î–µ–¥–ª–∞–π–Ω: {task['deadline_str']}\n"
        detail_text += f"üìû –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {task['initiator_name']}\n"
        detail_text += f"‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {task['initiator_phone']}\n"
        
        if files:
            detail_text += f"\nüìé –§–∞–π–ª—ã ({len(files)}):\n"
            for file in files:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                size_mb = file['file_size'] / (1024 * 1024)
                if size_mb < 1:
                    size_str = f"{file['file_size'] / 1024:.1f} –ö–ë"
                else:
                    size_str = f"{size_mb:.1f} –ú–ë"
                
                detail_text += f"‚Ä¢ {file['file_name']} ({size_str})\n"
                detail_text += f"  üë§ –ó–∞–≥—Ä—É–∑–∏–ª: {file['uploader_name']}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞)
        task_assignee_id = task.get('assignee_id')
        if user and (user['user_id'] == task_assignee_id or user['role'] in ['director', 'manager']):
            action_buttons.append([InlineKeyboardButton(
                text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", 
                callback_data=f"status_{task_id}"
            )])
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        action_buttons.append([InlineKeyboardButton(
            text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", 
            callback_data=f"comments_{task_id}"
        )])
        
        # –ö–Ω–æ–ø–∫–∞ —Ñ–∞–π–ª–æ–≤
        if files:
            action_buttons.append([InlineKeyboardButton(
                text="üìé –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã", 
                callback_data=f"files_{task_id}"
            )])
        
        action_buttons.append([InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", 
            callback_data="back_to_tasks"
        )])
        
        await callback.message.edit_text(
            detail_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=action_buttons)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_task_callback_by_id: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def show_tasks_list(callback: CallbackQuery, message_prefix: str = ""):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    try:
        telegram_id = callback.from_user.id
        user = await UserManager.get_user_by_telegram_id(telegram_id)
        tasks = await TaskManager.get_user_tasks(user['user_id'], user['role'])
        
        if not tasks:
            await callback.message.edit_text("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
        control_buttons = [
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_tasks"),
             InlineKeyboardButton(text="üè¢ –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="filter_companies")]
        ]
        
        task_buttons = []
        for task in tasks[:15]:
            urgent_emoji = "üî•" if task.get('is_urgent', False) else ""
            
            status_name = STATUS_NAMES.get(task['status'], task['status'])
            title_short = task['title'][:30] + "..." if len(task['title']) > 30 else task['title']
            company_short = task['company_name'][:15] + "..." if len(task['company_name']) > 15 else task['company_name']
            
            # –û—Ç–ª–∞–¥–∫–∞ - –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ —Ç–æ—á–Ω–æ –≤ task['status']
            print(f"DEBUG: task status = '{task['status']}'")
            status_name = STATUS_NAMES.get(task['status'], task['status'])
            button_text = f"{task['status_emoji']}{urgent_emoji} {title_short} | {company_short} | {task.get('deadline_short', '')}"
            
            task_buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"task_{task['task_id']}"
            )])
        
        keyboard = control_buttons + task_buttons
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –µ—Å–ª–∏ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        tasks_text = f"üìù –í–∞—à–∏ –∑–∞–¥–∞—á–∏ ({len(tasks)})"
        if message_prefix:
            current_time = datetime.now().strftime("%H:%M:%S")
            tasks_text += f" - –æ–±–Ω–æ–≤–ª–µ–Ω–æ {current_time}"
        
        if len(tasks) > 15:
            tasks_text += f"\n\n–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 15 –∏–∑ {len(tasks)} –∑–∞–¥–∞—á"
        
        await callback.message.edit_text(
            tasks_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_tasks_list: {e}")

def register_my_tasks_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á"""
    dp.message.register(my_tasks_handler, F.text == "üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏")
    dp.callback_query.register(process_task_callback, F.data.startswith("task_"))
    dp.callback_query.register(process_task_callback, F.data.startswith("status_"))
    dp.callback_query.register(process_task_callback, F.data.startswith("set_status_"))
    dp.callback_query.register(process_task_callback, F.data == "filter_companies")
    dp.callback_query.register(process_task_callback, F.data == "back_to_tasks")
    dp.callback_query.register(process_task_callback, F.data.startswith("company_"))
    dp.callback_query.register(process_task_callback, F.data == "refresh_tasks")